# LICENSES/LICENSE.scipy.txt
# See https://github.com/scipy/scipy/blob/main/.github/workflows/wheels.yml
# Modified for use with nogil Python

name: scipy

on: [workflow_dispatch]

env:
  VERSION: 1.9.3
  # FIXME: crashing tests
  CIBW_TEST_SKIP: "*"

jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
        - [ubuntu-20.04, manylinux, x86_64]
        - [macos-10.15, macosx, x86_64]
        - [macos-12, macosx, arm64]
        - [windows-2019, win, AMD64]
    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'scipy/scipy'
          ref: v${{ env.VERSION }}
          submodules: true
          # needed for scipy/tools/version_utils.py
          fetch-depth: 0

      - name: Fix tags
        run: git tag -f v${{ env.VERSION }}

      - name: win_amd64 - install rtools
        run: |
          # mingw-w64
          choco install rtools --no-progress
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
        if: ${{ runner.os == 'Windows' && env.IS_32_BIT == 'false' }}

      - name: Set up QEMU
        if: ${{ runner.os == 'Linux' && matrix.buildplat[2] == 'aarch64' }}
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Build wheels
        uses: colesbury/cibuildwheel@nogil
        if: >-
          ( ! contains(matrix.buildplat[2], 'arm64' ) )
        env:
          CIBW_BUILD: nogil39-*
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS

      - uses: colesbury/setup-python@nogil
        if: ${{ matrix.buildplat[1] == 'macosx' && matrix.buildplat[2] == 'arm64' }}
        with:
          python-version: nogil-3.9

      - name: Build macosx_arm64
        if: ${{ matrix.buildplat[1] == 'macosx' && matrix.buildplat[2] == 'arm64' }}
        run: |
          export PLAT="arm64"
          export _PYTHON_HOST_PLATFORM="macosx-12.0-arm64"
          export CROSS_COMPILE=1

          # Need macOS >= 11 for arm compilation.
          export MACOSX_DEPLOYMENT_TARGET=11.0

          # SDK root needs to be set early, installation of gfortran/openblas
          # needs to go in the correct location.
          export SDKROOT=/Applications/Xcode_13.2.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk
          export ARCHFLAGS=" -arch arm64 "

          # install dependencies for the build machine
          pip install meson cython pybind11 pythran ninja oldest-supported-numpy build delocate meson-python wheel

          # sets up gfortran compiler/openblas, sets compiler flags.
          bash tools/wheels/cibw_before_build_macos.sh $(pwd)
          export PKG_CONFIG_PATH=/opt/arm64-builds/lib/pkgconfig
          export PKG_CONFIG=/usr/local/bin/pkg-config
          export CFLAGS=" -arch arm64 $CFLAGS"
          export CXXFLAGS=" -arch arm64 $CXXFLAGS"
          export LD_LIBRARY_PATH="/opt/arm64-builds/lib:$FC_LIBDIR:$LD_LIBRARY_PATH"
          meson setup --cross-file $(pwd)/tools/wheels/cross_arm64.txt build

          # use the pip frontend because the build front end does not end up
          # obeying the configuration flags it's passed.
          # For example: `python -m build -Cbuilddir=dir` does not end up using
          # dir as the meson build directory. This is an issue because
          # the cross-compile specification is contained in that directory.

          python -m pip wheel -w dist -vvv --config-settings builddir=build .
          rm dist/numpy*.whl

          # The `.so` are all converted to `-rpath/libgfortran` by
          # gfortran/meson, with all absolute paths removed.
          # Enables delocate to find the libopenblas/libgfortran libraries.
          export DYLD_LIBRARY_PATH=/opt/gfortran-darwin-arm64/lib/gcc/arm64-apple-darwin20.0.0/10.2.1:/opt/arm64-builds/lib

          delocate-listdeps dist/scipy*.whl
          delocate-wheel --require-archs=arm64 -k -w wheelhouse dist/scipy*.whl

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  upload_wheel:
    needs: [build_wheels]
    uses: ./.github/workflows/upload-wheel.yml
    secrets: inherit
